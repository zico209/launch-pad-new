/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TOKENS_PER_CLAIM"
      | "airdropToken"
      | "totalTokensWithdrawn"
      | "wasClaimed"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokensAirdropped"): EventFragment;

  encodeFunctionData(
    functionFragment: "TOKENS_PER_CLAIM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKENS_PER_CLAIM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace TokensAirdroppedEvent {
  export type InputTuple = [beneficiary: AddressLike];
  export type OutputTuple = [beneficiary: string];
  export interface OutputObject {
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Airdrop extends BaseContract {
  connect(runner?: ContractRunner | null): Airdrop;
  waitForDeployment(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TOKENS_PER_CLAIM: TypedContractMethod<[], [bigint], "view">;

  airdropToken: TypedContractMethod<[], [string], "view">;

  totalTokensWithdrawn: TypedContractMethod<[], [bigint], "view">;

  wasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  withdrawTokens: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TOKENS_PER_CLAIM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "airdropToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalTokensWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "TokensAirdropped"
  ): TypedContractEvent<
    TokensAirdroppedEvent.InputTuple,
    TokensAirdroppedEvent.OutputTuple,
    TokensAirdroppedEvent.OutputObject
  >;

  filters: {
    "TokensAirdropped(address)": TypedContractEvent<
      TokensAirdroppedEvent.InputTuple,
      TokensAirdroppedEvent.OutputTuple,
      TokensAirdroppedEvent.OutputObject
    >;
    TokensAirdropped: TypedContractEvent<
      TokensAirdroppedEvent.InputTuple,
      TokensAirdroppedEvent.OutputTuple,
      TokensAirdroppedEvent.OutputObject
    >;
  };
}
